#ifndef __g_shader_fragment_quad_header__
#define __g_shader_fragment_quad_header__
static const char *g_shader_fragment_quad = ""
#if defined(USE_LD)
"quad.frag.glsl"
#else
"mat3 H=mat3(.94,-.27,.2,-.18,-.9,-.41,.29,.35,-.89);"
"int i=3;"
"vec3 a[]="
"{"
"vec3(0),vec3(2,1,2),vec3(0,-.4,0),vec3(.2,.05,.8),vec3(0,-.1,-.6),vec3(.44,.44,.11),vec3(-.5,.8,-.8),vec3(.02,.01,.06),vec3(.5,.8,.8),vec3(.02,.01,.06),vec3(-.5,.8,-0),vec3(.02,.01,.06),vec3(-.5,.8,.8),vec3(.02,.01,.06),vec3(.5,.8,-.8),vec3(.02,.01,.06),vec3(.5,.8,0),vec3(.02,.01,.06),vec3(0,-.1,-.6),vec3(.4,.4,.02),vec3(0,-.1,0),vec3(.4,.4,.7)"
"}"
",n[]="
"{"
"vec3(14,-.6,-.6),vec3(-1.2,.1,1.8),vec3(.7,0,-.8),vec3(-1.5,0,1.5),vec3(.7,0,-.8),vec3(10,.6,-.6),vec3(-1.5,.1,.8),vec3(.9,-.2,-.5),vec3(-1.7,.1,.3),vec3(1,-.2,-.4),vec3(12,-.6,-.6),vec3(1.4,-.7,1.3),vec3(-.6,.3,-.9),vec3(1.3,-.7,1.4),vec3(-.5,.3,-.9),vec3(4,-.6,-.4),vec3(1.3,-.7,1.4),vec3(-.5,.3,-.9),vec3(1.3,-.5,1.4),vec3(-.5,.2,-.9),vec3(12,-.4,.6),vec3(0,-.1,.1),vec3(0,0,-1),vec3(0,-.1,1.2),vec3(0,0,-1),vec3(10,.6,-.6),vec3(.9,.7,-1.4),vec3(-.8,-.5,.9),vec3(1.2,.5,-1.4),vec3(-.7,-.4,.7),vec3(16,-.6,.6),vec3(.9,-.1,.3),vec3(-.6,0,-.9),vec3(.8,-.1,1.5),vec3(-.6,0,-.9),vec3(14,.6,-.6),vec3(-1.6,.2,1.4),vec3(.8,-.2,-.7),vec3(-1.9,.2,.5),vec3(1,-.1,-.5),vec3(10,-.6,-.6),vec3(-1.5,-.7,.6),vec3(.9,.4,-.5),vec3(-1.4,-.7,.7),vec3(.8,.4,-.6)"
"}"
";"
"int l[]="
"{"
"2,0,0,0,0,11,0,0,63,3,4,504,0,0,0,4,504,0,63,1,6,511,0,0,0,3,4,63,0,-1,1,4,0,0,0,1,4,0,1,9,21,516,0,0,0,8,4,0,63,9,3,516,0,0,0,12,4,0,63,9,3,516,0,0,0,4,516,0,63,3,6,511,63,0,-9,7,511,0,0,0,3,4,63,0,0,3,0,0,0,0"
"}"
";"
"float j=3.14159;"
"float f(vec3 c,vec3 e)"
"{"
"float v=length(c/e);"
"return v*(v-1)/length(c/(e*e));"
"}"
"float P(vec3 v)"
"{"
"vec2 i[]="
"{"
"vec2(.1,.2),vec2(.05,.15),vec2(.1,.4),vec2(.15,0),vec2(.05,.45),vec2(.2,0),vec2(0,.5),vec2(.2,0),vec2(.05,.45),vec2(.15,0),vec2(.1,.4),vec2(.15,0),vec2(.3,0),"
"}"
";"
"float t=(v.b+.5)*12;"
"vec2 a;"
"float l=0;"
"if(t<0)a=i[0],l=-t;"
"else if(t>12)a=i[12],l=t-12;"
"else"
"{"
"float e=sin((t-floor(t))*j/2);"
"a=mix(i[int(floor(t))],i[int(ceil(t))],e);"
"}"
"float m=5/(pow(sin(v.b*1.3-1.6),3)+.05);"
"vec3 n=v+vec3(0,.27*sin(v.b*2-j/2)+.24,.5);"
"vec2 e=vec2(n.r,n.g)*m,c=vec2(n.r,n.g)*m,o=vec2(1,0),r=o;"
"for(int v=0;"
"v<8;"
"v++)"
"{"
"vec2 t=vec2(e.r*e.r-e.g*e.g,e.r*e.g+e.g*e.r)+vec2(a.r,a.g),i=vec2(e.r*o.r-e.g*o.g,e.r*o.g+e.g*o.r)*2,n=vec2(c.r*c.r-c.g*c.g,c.r*c.g+c.g*c.r)+vec2(a.r,-a.g),a=vec2(c.r*r.r-c.g*r.g,c.r*r.g+c.g*r.r)*2;"
"e=t,o=i,c=n,r=a;"
"if(max(length(e),length(c))>2)break;"
"}"
"return max(max(min(length(e)*log(length(e))/length(o)/5,length(c)*log(length(c))/length(r)/5),-min(min(min(f(v-vec3(0,-.07,0),vec3(.12,.15,.4)),f(v-vec3(0,-.111,-.24),vec3(.18,.16,.06))),min(f(v-vec3(0,-.103,-.08),vec3(.2,.18,.06)),f(v-vec3(0,-.103,.08),vec3(.2,.18,.06)))),f(v-vec3(0,-.111,.24),vec3(.18,.16,.06)))),-min(length(v+vec3(0,.18,-.63))-.1,length(v+vec3(0,.14,.63))-.12));"
"}"
"float r(vec3 i,int v)"
"{"
"vec3 r=i-a[v*2],c=abs(r)-a[v*2+1];"
"float t=length(max(c,0))+min(max(c.r,max(c.g,c.b)),0);"
"if(v==10)"
"{"
"if(t<.01)return P(r);"
"return t+.01;"
"}"
"vec2 a=abs(max(fract(r.rb*3.5)-.95,0)-.025);"
"float o=(a.r+a.g)*.4;"
"if(v==2)"
"{"
"vec3 e=abs(c+.033)-.033;"
"t=min(min(length(max(vec3(c.r,e.g,e.b),0))+min(max(c.r,max(e.g,e.b)),0),length(max(vec3(e.r,c.g,e.b),0))+min(max(e.r,max(c.g,e.b)),0)),length(max(vec3(e.r,e.g,c.b),0))+min(max(e.r,max(e.g,c.b)),0));"
"}"
"if(v==0)o*=.7+smoothstep(.95,1.,abs(r.g))*.3,t*=-1;"
"return t-o;"
"}"
"float r(vec3 t,float a,out int o)"
"{"
"float c=9;"
"for(int e=0;"
"e<int(a);"
"++e)if((1<<e&i)!=0)"
"{"
"float v=r(t,e);"
"if(v<c)o=e,c=v;"
"}"
"return c;"
"}"
"float b(vec3 t,vec3 l,vec3 a,out vec3 c,out vec3 f,out int v)"
"{"
"vec3 o=vec3(.01,0,0);"
"float e=0,n=0,i=9;"
"for(int o=0;"
"o<66;"
"++o)"
"{"
"c=t+l*e,e=r(c,a.r,v);"
"if(e<0)break;"
"i=min(i,e),t=c,e=e*(1+a.g)+a.g,n+=e;"
"if(n>a.b)"
"{"
"v=3;"
"break;"
"}"
"}"
"if(e<0)for(int o=0;"
"o<11;"
"++o)"
"{"
"vec3 a=(c+t)/2;"
"e=r(a,v);"
"if(e<.0)c=a;"
"else t=a;"
"}"
"return f=normalize(vec3(r(c+o.rgg,v),r(c+o.grg,v),r(c+o.ggr,v))),i;"
"}"
"vec3 m(vec3 e,float a,float o)"
"{"
"vec3 c=vec3(0);"
"float v=1;"
"for(int t=0;"
"t<4;"
"++t)e=H*e,c+=texture(u,e).rgb*v,e*=a,v*=o;"
"return c;"
"}"
"void main()"
"{"
"g=vec4(9,9,9,1);"
"vec3 f,e;"
"float r=h;"
"for(int c=0;"
"true;"
"c+=5)"
"{"
"vec3 t=n[c];"
"float o=t.r*352300,v=r/o;"
"if(v<1)"
"{"
"f=mix(n[c+1],n[c+3],v),e=normalize(mix(n[c+2],n[c+4],v)),a[4].b=a[18].b=mix(t.g,t.b,v);"
"break;"
"}"
"r-=o;"
"}"
"r=h;"
"for(int e=0;"
"true;"
"e+=5)"
"{"
"float v=l[e]*352300,c=r/v;"
"if(c<1)"
"{"
"int t=int(round(mix(l[e+2],l[e+3],c))),v=l[e+4],a=int(mix(h&511,511,v>0?c:1-c));"
"i|=l[e+1]|(a&t)<<abs(v);"
"break;"
"}"
"r-=v;"
"}"
"vec2 x=s*vec2(1.24,.7);"
"vec3 l=cross(e,vec3(0,1,0));"
"e=normalize(x.r*l+x.g*normalize(cross(l,e))+e);"
"vec4 n=vec4(0);"
"vec3 t,c;"
"int s=i,v;"
"b(f,e,vec3(11,.003,9),t,c,v);"
"while(v>=9)"
"{"
"i^=1<<v;"
"float o=min(max(P(t-a[20]),0)*15,.5);"
"vec4 a=v==9?vec4(vec3(5,5,7)*sqrt(abs(m(t.brg*h*.00007,.5,2.1)+m(t*o*1.6,.3,1.6)/99)),1)*o:vec4(9,9,22,.9)*smoothstep(-.9,.0,dot(e,c));"
"n=n*(1-a.a)+a,b(f,e,vec3(11,.003,9),t,c,v);"
"}"
"if(v<3)"
"{"
"i=s^1<<v;"
"vec3 r=t-a[v*2];"
"float f=smoothstep(1.96,1.97,max(abs(r.r),abs(r.b))),o=mix(.2,1.,f);"
"c=mix(normalize(m(r*vec3(7),.4,1.2)+c*55),normalize(m(r*vec3(5,.2,5),.5,1.7)+m(r*vec3(13,11,13),.7,2.1)+c*55),f);"
"vec3 s=mix(vec3(.8,.9,1),vec3(.95,.95,1),f),m=vec3(0);"
"for(int r=3;"
"r<10;"
"++r)if((1<<r&i)!=0)"
"{"
"vec3 i=a[r*2]-t;"
"float n=length(i);"
"vec3 a=i/n;"
"float s=b(t,a,vec3(3,.02,n),l,i,v);"
"if(v>=3)"
"{"
"vec3 n=normalize(a-e);"
"float v=max(dot(c,a),0),i=max(dot(c,-e),0),l=max(dot(c,n),0),f=acos(v),h=acos(i),g=o*o,t=o/2,x=l*l*(g-1)+1;"
"m+=(v*(1-o/(o+.3)/2+o/(o+.09)/2*max(dot(normalize(a-v*c),normalize(-e-i*c)),0)*sin(max(f,h))*tan(min(f,h)))+v*(g/(j*x*x))*(.9+.01*pow(1-(max(dot(a,n),0)),5))/((1-v*t+t)*(1-i*t+t)))*(((r==((11)-2))?vec3(.25,.25,.33):vec3(.25))*smoothstep(.0,.3,s*3));"
"}"
"}"
"g.rgb=mix(m*s,n.rgb,n.a);"
"}"
"}"
#endif
"";
#if !defined(DNLOAD_RENAME_UNUSED)
#if defined(__GNUC__)
#define DNLOAD_RENAME_UNUSED __attribute__((unused))
#else
#define DNLOAD_RENAME_UNUSED
#endif
#endif
#endif
